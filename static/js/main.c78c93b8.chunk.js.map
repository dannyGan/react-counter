{"version":3,"sources":["logo.svg","component/counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","props","reset","setState","currentValue","state","increment","decrement","multiplyByTwo","divideByTwo","console","log","this","class","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,mKC4E5BC,E,YAzEd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAMPC,MAAQ,WACP,EAAKC,SAAS,CACbC,aAAe,EAAKC,MAAMD,aAAe,KATxB,EAanBE,UAAY,WACX,EAAKH,SAAS,CACbC,aAAc,EAAKC,MAAMD,aAAe,KAfvB,EAmBnBG,UAAY,WACX,EAAKJ,SAAS,CACbC,aAAc,EAAKC,MAAMD,aAAe,EAAI,EAAKC,MAAMD,aAAe,EAAI,KArBzD,EAyBnBI,cAAgB,WACf,EAAKL,SAAS,CACbC,aAAwC,EAA1B,EAAKC,MAAMD,gBA3BR,EA+BnBK,YAAc,WACb,EAAKN,SAAS,CACbC,aAAc,EAAKC,MAAMD,aAAe,KA/BzC,EAAKC,MAAQ,CACZD,aAAc,GAHG,E,sEA6ClB,OADAM,QAAQC,IAAIC,KAAKX,OAEhB,6BACC,wBAAIY,MAAM,WAAV,wCACA,6BACA,4BACC,0BAAMA,MAAM,iBAAiBD,KAAKP,MAAMD,eAEzC,6BAEA,4BAAQS,MAAM,UAAUC,QAASF,KAAKJ,eAAtC,KAGA,4BAAQK,MAAM,UAAUC,QAASF,KAAKN,WAAtC,KAGA,4BAAQO,MAAM,UAAUC,QAASF,KAAKV,OAAtC,UAGA,4BAAQW,MAAM,UAAUC,QAASF,KAAKL,WAAtC,KAGA,4BAAQM,MAAM,UAAUC,QAASF,KAAKH,aAAtC,U,GAnEkBM,IAAMC,W,MCYbC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c78c93b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\n\nclass Counter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentValue: 0\n\t\t};\n\t}\n\n\treset = () => {\n\t\tthis.setState({\n\t\t\tcurrentValue: (this.state.currentValue = 0)\n\t\t});\n\t};\n\n\tincrement = () => {\n\t\tthis.setState({\n\t\t\tcurrentValue: this.state.currentValue + 1\n\t\t});\n\t};\n\n\tdecrement = () => {\n\t\tthis.setState({\n\t\t\tcurrentValue: this.state.currentValue > 0 ? this.state.currentValue - 1 : 0\n\t\t});\n\t};\n\n\tmultiplyByTwo = () => {\n\t\tthis.setState({\n\t\t\tcurrentValue: this.state.currentValue * 2\n\t\t});\n\t};\n\n\tdivideByTwo = () => {\n\t\tthis.setState({\n\t\t\tcurrentValue: this.state.currentValue / 2\n\t\t});\n\t};\n\n\t// decrement = () => {\n\t// \tthis.setState({\n\t// \t\tcurrentValue: this.state.currentValue - 1\n\t// \t});\n\t// };\n\n\trender() {\n\t\tconsole.log(this.props);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 class=\"opening\">Feel free to use the operator number</h1>\n\t\t\t\t<br />\n\t\t\t\t<h1>\n\t\t\t\t\t<span class=\"displayNumber\">{this.state.currentValue}</span>\n\t\t\t\t</h1>\n\t\t\t\t<br />\n\n\t\t\t\t<button class=\"counter\" onClick={this.multiplyByTwo}>\n\t\t\t\t\t*\n\t\t\t\t</button>\n\t\t\t\t<button class=\"counter\" onClick={this.increment}>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t\t<button class=\"counter\" onClick={this.reset}>\n\t\t\t\t\tReset!\n\t\t\t\t</button>\n\t\t\t\t<button class=\"counter\" onClick={this.decrement}>\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t\t<button class=\"counter\" onClick={this.divideByTwo}>\n\t\t\t\t\t/\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Counter;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from './component/counter'\nimport './component/counter.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}